[{"name":"app.R","content":"\r\nlibrary(tidyverse)\r\nlibrary(lubridate)\r\nlibrary(shiny)\r\nlibrary(bs4Dash)\r\nlibrary(shinylive)\r\nlibrary(gtExtras)\r\nsource(\"loading_cleaning.R\")\r\nsource(\"creating_table.R\")\r\n\r\nui <- dashboardPage(\r\n  \r\n  help = NULL,\r\n  fullscreen = TRUE,\r\n  \r\n  title = \"Outbound DEA Dashboard\",\r\n  \r\n  header = dashboardHeader(\r\n    title = dashboardBrand(\r\n      title = \"Outbound DEA\",\r\n      color = \"primary\"\r\n    )\r\n  ),\r\n  \r\n  sidebar = dashboardSidebar(\r\n    sidebarMenu(\r\n      id = \"sidebarMenuid\",\r\n      menuItem(\r\n        \"Buffer Management\",\r\n        tabName = \"buffer_management\"\r\n      ),\r\n      menuItem(\r\n        \"CPT Breakdown\",\r\n        tabName = \"cpt_breakdown\"\r\n      )\r\n    )\r\n  ),\r\n  \r\n  controlbar = dashboardControlbar(),\r\n  \r\n  footer = dashboardFooter(\r\n    left = \"@brownofz\",\r\n    right = \"2025\"\r\n  ),\r\n  \r\n  body = dashboardBody(\r\n    tabItems(\r\n      \r\n      tabItem(\r\n        tabName = \"buffer_management\",\r\n        \r\n        fluidRow(\r\n          column(\r\n            width = 6,\r\n            infoBox(\r\n              width = 6,\r\n              title = \"CSV Upload\",\r\n              fileInput(inputId = \"buffercsv\", label = \"CPT Dashboard CSV Upload\")\r\n            )\r\n          )\r\n        ),\r\n        fluidRow(\r\n          box(\r\n            \r\n            title = \"Daily Buffer Management\",\r\n            width = 12,\r\n            collapsible = TRUE,\r\n            maximizable = TRUE,\r\n            gt_output(outputId = \"table\")\r\n          )\r\n        )\r\n      ),\r\n      \r\n      tabItem(\r\n        tabName = \"cpt_breakdown\",\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n\r\n\r\nserver <- function(input, output) {\r\n  \r\n  bufferStorage <- reactiveVal()\r\n  # Observer\r\n  observeEvent(input$buffercsv, {\r\n    # Check if file is uploaded\r\n    req(input$buffercsv)\r\n    # Read and store CSV as data frame\r\n    bufferCSVdata <- read_csv(input$buffercsv$datapath)\r\n    # manipulation functions\r\n    buffer_standard <- buffer_function(bufferCSVdata)\r\n    buffer_table <- create_table(buffer_standard)\r\n    output$table <- render_gt(expr = buffer_table)\r\n    \r\n    bufferStorage(bufferCSVdata)\r\n\r\n  })\r\n  # output$table <- render_gt(expr = buffer_table)\r\n  \r\n}\r\n\r\n\r\nshinyApp(ui, server)\r\n\r\n","type":"text"},{"name":"Outbound Buffer Dashboard.Rproj","content":"Version: 1.0\r\nProjectId: f02e3f40-1c53-4d18-8d0d-942841f30d5c\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"},{"name":"creating_table.R","content":"create_table <- function(buffer_standard) {\r\n\r\ncols_order <- unlist(lapply(c(\"Sun\", \"Mon\", \"Tue\",\r\n                              \"Wed\", \"Thu\", \"Fri\"),\r\n                            function(x) paste(x, c(\"Over\", \"Standard\", \"Under\"), sep = \"_\")))\r\n\r\n# Mutating data for GT Table\r\nbuffer_wide <- buffer_standard %>%\r\n  group_by(week) %>%\r\n  pivot_wider(names_from = day_of_week,\r\n              values_from = c(Over, Standard, Under),\r\n              names_glue = \"{day_of_week}_{.value}\") %>%\r\n  select(all_of(c(\"terminator\", cols_order)))\r\n\r\n\r\n# Creating and formatting the gt table\r\nbuffer_table <- buffer_wide %>%\r\n  gt(rowname_col = \"terminator\", ) %>%\r\n  tab_header(\r\n    title = \"Out of Buffer Percentage\",\r\n    subtitle = \"By Week & Day\") %>%\r\n  tab_footnote(\r\n    footnote = md(\"***Note:*** The percentages shown above represent the percent of the shift in buffer.<br>\r\n                  ***Example:*** 40% in Standard translates to 40% of the total shift was within buffer standard.\")\r\n  ) %>%\r\n  tab_spanner_delim(delim = \"_\") %>%\r\n  fmt_percent(ends_with(c(\"Over\", \"Standard\", \"Under\")), decimal = 2) %>%\r\n  data_color(\r\n    columns = starts_with(cols_order) & ends_with(c(\"Standard\")),\r\n    palette = c(\"green\"),\r\n    domain = c(.8, 1.00),\r\n    na_color = \"red\"\r\n  ) %>%\r\n  data_color(\r\n    columns = ends_with(c(\"Over\", \"Under\")),\r\n    fn = function(x) {\r\n      case_when(\r\n        x == 0 ~ \"green\",\r\n        x > 0 & x <= 0.2 ~ \"yellow\",\r\n        x > 0.2 ~ \"red\",\r\n        TRUE ~ \"white\"\r\n      )\r\n    },\r\n    apply_to = \"fill\"\r\n  ) %>%\r\n  tab_options(\r\n    data_row.padding = px(0.5),\r\n    column_labels.padding.horizontal = px(3)) %>%\r\n  cols_align(\r\n    align = c(\"center\"),\r\n    columns = everything()\r\n  )\r\nreturn(buffer_table)\r\n}\r\n\r\n\r\n\r\n\r\n","type":"text"},{"name":"loading_cleaning.R","content":"buffer_function <- function(bufferCSVdata) {\r\n\r\n# ------------------------------------------------------------------\r\n# Define constants at the start\r\nSHIFT_SCHEDULES <- list(\r\n  fhd = c(\"Sun\", \"Mon\", \"Tue\"),\r\n  bhd = c(\"Thu\", \"Fri\", \"Sat\"),\r\n  ol = \"Wed\",\r\n  rt = c(\"Thu\", \"Fri\", \"Sat\"),\r\n  fhn = c(\"Sun\", \"Mon\", \"Tue\", \"Wed\")\r\n)\r\nSHIFT_HOURS <- list(\r\n  start = 7,\r\n  end = 18\r\n)\r\nNUMERIC_COLUMNS <- c(\"Label.MaxUnits.20.\", \"Label.MaxUnits\", \r\n                     \"Label.MinUnits\", \"Label.Picking.Picked\")\r\n\r\n# ---------------------------------------------------------------------\r\n# Import and clean data\r\nbuffer_df <- bufferCSVdata %>%\r\n  # Skip first 5 rows and select first 5 columns in one operation\r\n  slice(-(1:5)) %>%\r\n  select(1:5) %>%\r\n  rename(Label.MaxUnits.20. = !!2, Label.MaxUnits = !!3,\r\n         Label.MinUnits = !!4, Label.Picking.Picked = !!5) %>%\r\n  # Convert buffer features to numeric\r\n  mutate(across(all_of(NUMERIC_COLUMNS), as.numeric),\r\n         Id = ymd_hm(Id))\r\n\r\n# ---------------------------------------------------------------------\r\n# Feature engineering \r\nbuffer_df <- buffer_df %>%\r\n  mutate(\r\n    # DateTime components\r\n    year = year(Id),\r\n    month = month(Id),\r\n    day = day(Id),\r\n    day_of_week = wday(Id, label = TRUE, week_start = 7),\r\n    week_of_year = epiweek(Id),\r\n    hour = hour(Id),\r\n    minute = minute(Id),\r\n    quarter = quarter(Id),\r\n    # Shift determinations\r\n    terminator = if_else(hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end, \r\n                         \"Days\", \"Nights\"),\r\n    shift = case_when(\r\n      hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end & \r\n        day_of_week %in% SHIFT_SCHEDULES$fhd ~ \"FHD\",\r\n      hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end & \r\n        day_of_week %in% SHIFT_SCHEDULES$bhd ~ \"BHD\",\r\n      hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end & \r\n        day_of_week == SHIFT_SCHEDULES$ol ~ \"OL\",\r\n      (hour <= SHIFT_HOURS$start | hour > SHIFT_HOURS$end) & \r\n        day_of_week %in% SHIFT_SCHEDULES$fhn ~ \"FHN\",\r\n      TRUE ~ \"RT\"\r\n    ),\r\n    across(where(is.numeric),\r\n           ~if_else(is.na(.), (lead(.) + lag(.)) / 2, .)\r\n    ),\r\n    # Calculations\r\n    # if picking picked in within buffer set buffer to standard to 0\r\n    MinUnits.80 = Label.MinUnits * 0.80,\r\n    buffer.to.standard = case_when(\r\n      Label.Picking.Picked > Label.MaxUnits ~ Label.Picking.Picked - Label.MaxUnits,\r\n      Label.Picking.Picked < Label.MinUnits ~ Label.Picking.Picked - Label.MinUnits,\r\n      TRUE ~ 0\r\n    )\r\n  )\r\n\r\n# Calculate over/under/standard features to calculate % of shift in buffer\r\n# negative is under| positive is over | 0 is in standard\r\nbuffer_standard <- buffer_df %>%\r\n  group_by(week_of_year, day_of_week, terminator) %>%\r\n  summarise(\r\n    across(\r\n      buffer.to.standard,\r\n      list(\r\n        Over = ~mean(. > 0.0, na.rm = TRUE),\r\n        Under = ~mean(. < 0.0, na.rm = TRUE),\r\n        Standard = ~mean(. == 0.0, na.rm = TRUE)\r\n      )\r\n    ),\r\n    .groups = 'drop'\r\n  ) %>% \r\n  rename(Standard = buffer.to.standard_Standard,\r\n         Over = buffer.to.standard_Over,\r\n         Under = buffer.to.standard_Under) %>% \r\n  mutate(week = paste(\"Week\", week_of_year))\r\n\r\nreturn(buffer_standard)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","type":"text"},{"name":"shiny_live.R","content":"library(shinylive)\r\n\r\nshinylive::export(\"W:/My Documents/R Projects/Outbound Buffer Dashboard\", \"site\")\r\n\r\nhttpuv::runStaticServer(\"site\")\r\n","type":"text"},{"name":"test.R","content":"# Load multiple packages efficiently with pacman\r\nrequired_packages <- c(\"tidyverse\", \"lubridate\", \"reactablefmtr\", \"gt\", \r\n                       \"rhandsontable\", \"formattable\", \"gtExtras\", \"shiny\", \"bslib\")\r\nif (!require(\"pacman\")) install.packages(\"pacman\")\r\npacman::p_load(char = required_packages)\r\n\r\n# ------------------------------------------------------------------\r\n# Define constants at the start\r\nSHIFT_SCHEDULES <- list(\r\n  fhd = c(\"Sun\", \"Mon\", \"Tue\"),\r\n  bhd = c(\"Thu\", \"Fri\", \"Sat\"),\r\n  ol = \"Wed\",\r\n  rt = c(\"Thu\", \"Fri\", \"Sat\"),\r\n  fhn = c(\"Sun\", \"Mon\", \"Tue\", \"Wed\")\r\n)\r\nSHIFT_HOURS <- list(\r\n  start = 7,\r\n  end = 18\r\n)\r\nNUMERIC_COLUMNS <- c(\"Label.MaxUnits.20.\", \"Label.MaxUnits\", \r\n                     \"Label.MinUnits\", \"Label.Picking.Picked\")\r\n\r\n# ---------------------------------------------------------------------\r\n# Import and clean data\r\nbuffer_df <- bufferCSVdata %>% # read_csv(\"data/data.csv\") %>%\r\n  # Skip first 5 rows and select first 5 columns in one operation\r\n  slice(-(1:5)) %>%\r\n  select(1:5) %>%\r\n  rename(Label.MaxUnits.20. = !!2, Label.MaxUnits = !!3,\r\n         Label.MinUnits = !!4, Label.Picking.Picked = !!5) %>%\r\n  # Convert buffer features to numeric\r\n  mutate(across(all_of(NUMERIC_COLUMNS), as.numeric),\r\n         Id = ymd_hm(Id))\r\n\r\n# ---------------------------------------------------------------------\r\n# Feature engineering \r\nbuffer_df <- buffer_df %>%\r\n  mutate(\r\n    # DateTime components\r\n    year = year(Id),\r\n    month = month(Id),\r\n    day = day(Id),\r\n    day_of_week = wday(Id, label = TRUE, week_start = 7),\r\n    week_of_year = epiweek(Id),\r\n    hour = hour(Id),\r\n    minute = minute(Id),\r\n    quarter = quarter(Id),\r\n    # Shift determinations\r\n    terminator = if_else(hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end, \r\n                         \"Days\", \"Nights\"),\r\n    shift = case_when(\r\n      hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end & \r\n        day_of_week %in% SHIFT_SCHEDULES$fhd ~ \"FHD\",\r\n      hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end & \r\n        day_of_week %in% SHIFT_SCHEDULES$bhd ~ \"BHD\",\r\n      hour > SHIFT_HOURS$start & hour <= SHIFT_HOURS$end & \r\n        day_of_week == SHIFT_SCHEDULES$ol ~ \"OL\",\r\n      (hour <= SHIFT_HOURS$start | hour > SHIFT_HOURS$end) & \r\n        day_of_week %in% SHIFT_SCHEDULES$fhn ~ \"FHN\",\r\n      TRUE ~ \"RT\"\r\n    ),\r\n    across(where(is.numeric),\r\n           ~if_else(is.na(.), (lead(.) + lag(.)) / 2, .)\r\n    ),\r\n    # Calculations\r\n    # if picking picked in within buffer set buffer to standard to 0\r\n    MinUnits.80 = Label.MinUnits * 0.80,\r\n    buffer.to.standard = case_when(\r\n      Label.Picking.Picked > Label.MaxUnits ~ Label.Picking.Picked - Label.MaxUnits,\r\n      Label.Picking.Picked < Label.MinUnits ~ Label.Picking.Picked - Label.MinUnits,\r\n      TRUE ~ 0\r\n    )\r\n  )\r\n\r\n# Calculate over/under/standard features to calculate % of shift in buffer\r\n# negative is under| positive is over | 0 is in standard\r\nbuffer_standard <- buffer_df %>%\r\n  group_by(week_of_year, day_of_week, terminator) %>%\r\n  summarise(\r\n    across(\r\n      buffer.to.standard,\r\n      list(\r\n        Over = ~mean(. > 0.0, na.rm = TRUE),\r\n        Under = ~mean(. < 0.0, na.rm = TRUE),\r\n        Standard = ~mean(. == 0.0, na.rm = TRUE)\r\n      )\r\n    ),\r\n    .groups = 'drop'\r\n  ) %>% \r\n  rename(Standard = buffer.to.standard_Standard,\r\n         Over = buffer.to.standard_Over,\r\n         Under = buffer.to.standard_Under) %>% \r\n  mutate(week = paste(\"Week\", week_of_year))\r\n\r\nsource(\"creating_table.R\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","type":"text"}]
